/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package cn.wps.plugin

import org.gradle.api.NamedDomainObjectContainer
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.internal.artifacts.configurations.DefaultConfiguration
import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency
import org.gradle.api.publish.maven.MavenPublication
import org.gradle.api.publish.maven.plugins.MavenPublishPlugin

/**
 * 动态替换依赖插件，同时为每个project添加一下上传的task，方便上传aar到本地仓库
 */
public class DynamicDependencyPlugin implements Plugin<Project> {
    @Override
    public void apply(Project targetProject) {
        // 创建extenstion不能放在afterEvaluate里面，否则找不到 dynamicDependency。
        def rootProject = targetProject.rootProject
        NamedDomainObjectContainer<DependencyResolveExt> dependencyResolveContainer = targetProject.container(DependencyResolveExt.class)
        rootProject.extensions.add("dynamicDependency", dependencyResolveContainer)

        // afterEvalute 发生在 configure 阶段之后。
        targetProject.afterEvaluate {
            targetProject.rootProject.getSubprojects().forEach({
                // 为每一个project添加上传插件
                it.plugins.apply(MavenPublishPlugin)
                // 这一步相当于给每个module添加了一个上传的task，但是该task还没有调用。
                def proj = it
                it.publishing {
                    publications {
                        // 这个wps是自定义的字符串
                        wps(MavenPublication) {
                            groupId 'cn.wps'
                            artifactId proj.name
                            version '1.1-SNAPSHOT'

                            def file = new File("${proj.buildDir}/outputs/aar/${proj.name}-cn-debug.aar")
                            // 字符串中有变量引用的时候不能用单引号
                            def file_2 = new File("${proj.buildDir}/outputs/aar/${proj.name}-debug.aar")
                            def final_artifact
                            if (file.exists()) {
                                final_artifact = "${proj.buildDir}/outputs/aar/${proj.name}-cn-debug.aar"
                            } else if (file_2.exists()) {
                                final_artifact = "${proj.buildDir}/outputs/aar/${proj.name}-debug.aar"
                            } else {
                                // 必须要有一个else分支，否则build失败
                                final_artifact = "${proj.buildDir}/libs/${proj.name}.jar"
                            }
                            artifact final_artifact
                        }
                    }

                    repositories {
                        // 上传到mavenLocal,避免代码泄露
                        mavenLocal()
                    }
                }
            })

            // 替换逻辑
            targetProject.rootProject.getSubprojects().forEach({
                def childProject = it
                Map<Project, DependencyResolveExt> resolveExtMap = new HashMap<>()

                childProject.configurations.all { DefaultConfiguration configuration ->
                    if (configuration.dependencies.size() == 0) {
                        return
                    }

                    configuration.dependencies.all { dependency ->
                        if (dependency instanceof DefaultProjectDependency) {
                            def depProjectName = dependency.dependencyProject.name
                            // 当前依赖项是否在定义的替换dsl中，通过resolveExtMap记录。
                            def dependencyResolveExt = dependencyResolveContainer.find {
                                it.name == depProjectName
                            }

                            if (dependencyResolveExt != null) {
                                resolveExtMap.put(dependency.dependencyProject, dependencyResolveExt)
                            }
                        }
                    }
                }

                println("dependencySubstitution map : " + resolveExtMap)
                childProject.configurations.all {
                    resolutionStrategy {
                        dependencySubstitution {
                            resolveExtMap.each { key, value ->
                                println("正在替换依赖， 当前工程：" + childProject.name)
                                println("原依赖： ${key.path}")
                                println("新依赖： ${value.groupId}:${getArtifactName(key, value.artifactId)}:${value.version}")
                                substitute project("${key.path}") with module("${value.groupId}:${getArtifactName(key, value.artifactId)}:${value.version}")
                                println("替换完毕")
                            }
                        }
                    }
                }
            })
        }

    }

    static def getArtifactName(Project project, String name) {
        if (name == null || name == "") {
            return project.name
        }
        return name
    }
}
